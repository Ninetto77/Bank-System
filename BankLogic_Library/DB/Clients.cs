//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankLogic_Library.DB
{
	using Lesson10.activityLog;
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;

	public partial class Clients: INotifyPropertyChanged, IComparable<Clients>
    {
        static Random r;

		public event Action<Clients, TypeOfAct> OnAnyChange;

		private int Id;
		private string departametId;
		private string surname;
		private string name;
		private string middlename;
		private string phone;
		private string pasportData;

		#region Свойства
		public int ID
		{
			get { return Id; }
			set
			{
				Id = value;
				OnPropertyChanged("ClientId");
			}
		}
		public string DepartametId
		{
			get { return departametId; }
			set
			{
				departametId = value;
				OnPropertyChanged("DepartametId");
			}
		}
		public string Surname
		{
			get { return surname; }
			set
			{
				surname = value;
				OnPropertyChanged("Surname");
			}
		}

		public string Name
		{
			get { return name; }
			set
			{
				name = value;
				OnPropertyChanged("Name");
			}
		}

		public string Middlename
		{
			get { return middlename; }
			set
			{
				middlename = value;
				OnPropertyChanged("Middlename");
			}
		}

		public string Phone
		{
			get { return phone; }
			set
			{
				phone = value;
				OnPropertyChanged("Phone");
			}
		}

		public string PasportData
		{
			get { return pasportData; }
			set
			{
				pasportData = value;
				OnPropertyChanged("PasportData");
			}
		}
		#endregion

		public event PropertyChangedEventHandler PropertyChanged;
		public void OnPropertyChanged([CallerMemberName] string prop = "")
		{
			if (PropertyChanged != null)
				PropertyChanged(this, new PropertyChangedEventArgs(prop));
		}


		#region Конструкторы
		static Clients()
		{
			r = new Random();
		}

		public Clients()
		{

		}

		public Clients(
						string DepartmentID,
						string Surname,
						string Name,
						string Middlename,
						string Phone,
						string PasportData)

		{
			this.DepartametId = DepartmentID;
			this.Surname = Surname;
			this.Name = Name;
			this.Middlename = Middlename;
			this.Phone = Phone;
			this.PasportData = PasportData;
		}

		public Clients(
				string Surname,
				string Name,
				string Middlename,
				string Phone,
				string PasportData)

		{
			this.DepartametId = (r.Next(1, 4)).ToString();
			this.Surname = Surname;
			this.Name = Name;
			this.Middlename = Middlename;
			this.Phone = Phone;
			this.PasportData = PasportData;
		}

		public Clients(
						string DepartmentID,
						string Surname,
						string name,
						string Phone)

		{
			this.DepartametId = DepartmentID;
			this.Surname = Surname;
			this.Name = name;
			this.Middlename = "Отсутствует";
			this.Phone = Phone;
			this.PasportData = "";
		}

		#endregion

		#region
		public void InvokeOnChange()
		{
			OnAnyChange?.Invoke(this, TypeOfAct.changeClientData);
		}

		#endregion

		override public string ToString()
		{
			return $"{Surname,10}{Name,10}{Middlename,10}{Phone,6}{PasportData,10}";
		}

		public int CompareTo(Clients other)
		{
			int rezul = String.Compare(this.Surname, other.Surname);
			if (rezul < 0)
				return -1;
			else
				if (rezul > 0) return 1;
			else
				return 0;
		}
	}
}
